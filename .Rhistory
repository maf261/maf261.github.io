par(mfrow=c(1,2))
qqnorm(da$y)
qqnorm(residuals(lm(y~x, da)))
layout(1)
#-----------------------------------------------------------------------------
# assimetria
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=100))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("convert -delay 10 assimet*.png assimet.gif")
# remove os arquivos png
file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# assimetria
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=100))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("convert -delay 10 assimet*.png assimet.gif")
# remove os arquivos png
#file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
# converte os pngs para um gif usando ImageMagick
system("convert -delay 10 assimet*.png assimet.gif")
install.packages("magic")
#-----------------------------------------------------------------------------
# assimetria
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=100))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("convert -delay 10 assimet*.png assimet.gif")
# remove os arquivos png
file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# assimetria
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=100))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("convert -delay 10 assimet.png assimet.gif")
# remove os arquivos png
file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
#number of frames or plots
frames <- 50
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',i,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',i,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', i,'plot.png', sep=''))
}
}
#loop through plots
for(i in 1:frames){
name <- rename(i)
#saves the plot as a .png file in the working directory
png(name)
sd <- 10
n  <- 10000
factor <- i * 2
m  <- 50 + factor
x  <- rnorm(n, m, sd)
hist(x,
xlim=c(0,200),
ylim=c(0,2000),
main = paste('Histogram of rnorm() n = ', n, ' mean = ', m, ' sd = ', sd),
)
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
#number of frames or plots
frames <- 50
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',i,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',i,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', i,'plot.png', sep=''))
}
}
#loop through plots
for(i in 1:frames){
name <- rename(i)
#saves the plot as a .png file in the working directory
png(name)
sd <- 10
n  <- 10000
factor <- i * 2
m  <- 50 + factor
x  <- rnorm(n, m, sd)
hist(x,
xlim=c(0,200),
ylim=c(0,2000),
main = paste('Histogram of rnorm() n = ', n, ' mean = ', m, ' sd = ', sd),
)
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
# converte os pngs para um gif usando ImageMagick
system("convert -delay 10 assimet.png assimet.gif")
# converte os pngs para um gif usando ImageMagick
system("convert -delay 10 assimet*.png assimet.gif")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=100))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=100))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("convert -delay 10 assimet*.png assimet.gif")
#number of frames or plots
frames <- 50
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',i,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',i,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', i,'plot.png', sep=''))
}
}
#loop through plots
for(i in 1:frames){
name <- rename(i)
#saves the plot as a .png file in the working directory
png(name)
sd <- 10
n  <- 10000
factor <- i * 2
m  <- 50 + factor
x  <- rnorm(n, m, sd)
hist(x,
xlim=c(0,200),
ylim=c(0,2000),
main = paste('Histogram of rnorm() n = ', n, ' mean = ', m, ' sd = ', sd),
)
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
dir.create("examples")
setwd("examples")
# example 1: simple animated countdown from 10 to "GO!".
png(file="example%02d.png", width=200, height=200)
for (i in c(10:1, "G0!")){
plot.new()
text(.5, .5, i, cex = 6)
}
dev.off()
# convert the .png files to one .gif file using ImageMagick.
# The system() function executes the command as if it was done
# in the terminal. the -delay flag sets the time between showing
# the frames, i.e. the speed of the animation.
system("convert -delay 80 *.png example_1.gif")
# to not leave the directory with the single jpeg files
# I remove them.
file.remove(list.files(pattern=".png"))
shell("convert -set delay = 80 -loop 0 *.png example_1.gif")
dir.create("examples")
setwd("examples")
# example 1: simple animated countdown from 10 to "GO!".
png(file="example%02d.png", width=200, height=200)
for (i in c(10:1, "G0!")){
plot.new()
text(.5, .5, i, cex = 6)
}
dev.off()
shell("convert -set delay = 80 -loop 0 *.png example_1.gif")
dir.create("examples")
setwd("examples")
setwd("examples")
dir.create("examples")
setwd("examples")
setwd("examples")
setwd("E:/Documentos/GitHub/MAF261/maf261.github.io/Aulas_MAF261/Aula11")
setwd("E:/Documentos/GitHub/MAF261/maf261.github.io/Aulas_MAF261/Residuos/frames")
setwd("E:/Documentos/GitHub/MAF261/maf261.github.io/Aulas_MAF261/Residuos/frames")
# example 1: simple animated countdown from 10 to "GO!".
png(file="example%02d.png", width=200, height=200)
for (i in c(10:1, "G0!")){
plot.new()
text(.5, .5, i, cex = 6)
}
dev.off()
# convert the .png files to one .gif file using ImageMagick.
# The system() function executes the command as if it was done
# in the terminal. the -delay flag sets the time between showing
# the frames, i.e. the speed of the animation.
system('"C:\Program Files\ImageMagick-7.0.8-Q16" -delay 20 -loop 0 files_*.png animation.gif')
# convert the .png files to one .gif file using ImageMagick.
# The system() function executes the command as if it was done
# in the terminal. the -delay flag sets the time between showing
# the frames, i.e. the speed of the animation.
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16" -delay 20 -loop 0 files_*.png animation.gif')
system("convert -delay 80 *.png example_1.gif")
shell("convert -set delay = 80 -loop 0 *.png example_1.gif")
# to not leave the directory with the single jpeg files
# I remove them.
file.remove(list.files(pattern=".png"))
setwd("E:/Documentos/GitHub/MAF261/maf261.github.io/Aulas_MAF261/Residuos/frames")
# example 1: simple animated countdown from 10 to "GO!".
png(file="example%02d.png", width=200, height=200)
for (i in c(10:1, "G0!")){
plot.new()
text(.5, .5, i, cex = 6)
}
dev.off()
# convert the .png files to one .gif file using ImageMagick.
# The system() function executes the command as if it was done
# in the terminal. the -delay flag sets the time between showing
# the frames, i.e. the speed of the animation.
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16" -delay 20 -loop 0 files_*.png animation.gif')
# to not leave the directory with the single jpeg files
# I remove them.
file.remove(list.files(pattern=".png"))
# convert the .png files to one .gif file using ImageMagick.
# The system() function executes the command as if it was done
# in the terminal. the -delay flag sets the time between showing
# the frames, i.e. the speed of the animation.
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16\\magick.exe" -delay 20 -loop 0 files_*.png animation.gif')
setwd("E:/Documentos/GitHub/MAF261/maf261.github.io/Aulas_MAF261/Residuos/frames")
# example 1: simple animated countdown from 10 to "GO!".
png(file="example%02d.png", width=200, height=200)
for (i in c(10:1, "G0!")){
plot.new()
text(.5, .5, i, cex = 6)
}
dev.off()
# convert the .png files to one .gif file using ImageMagick.
# The system() function executes the command as if it was done
# in the terminal. the -delay flag sets the time between showing
# the frames, i.e. the speed of the animation.
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16\\magick.exe" -delay 20 -loop 0 files_*.png animation.gif')
# to not leave the directory with the single jpeg files
# I remove them.
file.remove(list.files(pattern=".png"))
ani.options(convert = 'pathway/convert.exe')
any.options(convert = 'pathway/convert.exe')
setwd("E:/Documentos/GitHub/MAF261/maf261.github.io/Aulas_MAF261/Residuos/frames")
# example 1: simple animated countdown from 10 to "GO!".
png(file="example%02d.png", width=200, height=200)
for (i in c(10:1, "G0!")){
plot.new()
text(.5, .5, i, cex = 6)
}
dev.off()
# convert the .png files to one .gif file using ImageMagick.
# The system() function executes the command as if it was done
# in the terminal. the -delay flag sets the time between showing
# the frames, i.e. the speed of the animation.
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe" -delay 20 -loop 0 files_*.png animation.gif')
# assimetria
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=100))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe -delay 10 assimet*.png assimet.gif")
# remove os arquivos png
file.remove(list.files(pattern=".png"))
10*sin(seq(0.01, pi-0.01, l=100)
x
10*sin(seq(0.01, pi-0.01, l=100))
#-----------------------------------------------------------------------------
# assimetria
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=10))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe -delay 10 assimet*.png assimet.gif")
# remove os arquivos png
file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
png(file="assimet.png", width=300, height=150)
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=10))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
#-----------------------------------------------------------------------------
# assimetria
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=10))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe -delay 10 assimet*.png assimet.gif")
# remove os arquivos png
file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# assimetria
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=10))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe -delay 10 assimet*.png assimet.gif")
# remove os arquivos png
file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=10))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system("C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe -delay 10 assimet*.png assimet.gif")
shell("convert -set -delay 10 assimet*.png assimet.gif")
shell("convert -delay 10 assimet*.png assimet.gif")
shell("convert assimet*.png assimet.gif")
shell("convert -set delay = 80 -loop 0 assimet*.png assimet.gif")
shell("convert -set delay = 80 -loop assimet*.png assimet.gif")
shell("convert -set delay = 80 assimet*.png assimet.gif")
shell("convert -set assimet*.png assimet.gif")
shell("convert -set delay = 80 -loop 0 *.png example_shell_test.gif")
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=10))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
# system("C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe -delay 10 assimet*.png assimet.gif")
shell("convert -set delay = 80 -loop 0 *.png example_shell_test.gif")
# converte os pngs para um gif usando ImageMagick
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe"" -delay 10 assimet*.png assimet.gif')
#-----------------------------------------------------------------------------
# assimetria
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=10))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe"" -delay 10 assimet*.png assimet.gif')
# remove os arquivos png
file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
# converte os pngs para um gif usando ImageMagick
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe" -delay 10 assimet*.png assimet.gif')
#-----------------------------------------------------------------------------
# assimetria
library("magic")
dir.create("frames")
setwd("frames")
png(file="assimet%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in 10*sin(seq(0.01, pi-0.01, l=10))){
curve(dbeta(x, i, 10-i), 0, 1, xaxt="n", yaxt="n", xlab="", ylab="")
y <- rbeta(100, i, 10-i)
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe" -delay 10 assimet*.png assimet.gif')
# remove os arquivos png
file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
knitr::include_graphics("frames/assimet.gif")
require(knitr)
require(kfigr)
library(kableExtra)
options(knitr.table.format = "latex")
knitr::opts_chunk$set(echo = TRUE,fig.align = "center",message=FALSE, warning=FALSE)
#-----------------------------------------------------------------------------
# mistura de distribuições
library("magic")
dir.create("frames")
setwd("frames")
png(file="mistura%03d.png", width=300, height=150)
par(mar=c(1,1,1,1))
par(mfrow=c(1,2))
for(i in sin(seq(0, pi, l=100))){
curve(i*dnorm(x,0,1)+(1-i)*dnorm(x,0,6), -20, 20,
xaxt="n", yaxt="n", xlab="", ylab="")
y <- c(rnorm(ceiling(500*i),0,1), rnorm(floor(500*(1-i)),0,6))
qqnorm(y, xaxt="n", yaxt="n", main=NULL, xlab="", ylab=""); qqline(y)
}
dev.off()
# converte os pngs para um gif usando ImageMagick
system('"C:\\Program Files\\ImageMagick-7.0.8-Q16\\convert.exe" -delay 10 mistura*.png mistura.gif')
# remove os arquivos png
file.remove(list.files(pattern=".png"))
#-----------------------------------------------------------------------------
